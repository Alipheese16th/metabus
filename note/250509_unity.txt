
# 셰이더의 역사

유니티 4버전
퐁 셰이딩

유니티 5이상
레이트레이싱  빛반사


# LOD
거리별 메시의 폴리곤수를 줄이거나 늘려서 퀄리티를 변화시킴.




# 쉐이더 살펴보기

## 쉐이더 종류

### 레거시 쉐이더 / 모바일 쉐이더
굉장히 가볍기때문에 오브젝트 수가 많거나 할경우 필요

### 스탠다드 쉐이더 (물리기반 렌더링)
굉장히 무거움

### Specular Setup
Specular map이 있는경우 좀더 쨍하게 빛반사를 시킬수있음

## 렌더링모드
Opaque 디폴트 / 불투명
Cutout 특정범위만 출력 (나뭇잎이나 구멍뚤린 옷 같은)
Transparent 유리나 플라스틱 등 표현할때 투명한 옵젝 사실적 렌더링
Fade 투명도 값 설정. 빛 반사 까지 포함해서 투명하게 만들수있음. 투명도도 그라데이션 한것처럼 부드럽게 됨. 페이드아웃.

## 각 속성들
Albedo 디폴트 색 / 텍스쳐
Metallic 금속재질 수치
Specular 빛의 반사정도
Smoothness 부드러움,거칠기 수치
Normal Map 표면의 질감을 나타냄. vertex의 빛방향의 바뀜. 로우폴리곤을 하이폴리곤 처럼 보이는 효과
Height Map 표면의 높낮이표현. 높이가 더 도드라지게 보임
Occlusion 검은부분은 더 검게. 밝은부분은 더 밝게. 후드같은거 썻을때 반사광이 없을정도로 어둡게 적용할 필요가 있음
Detail Mask 
Secondary Maps 

% 앰비언트 오클루전은 ?


# Floor 메터리얼에서 텍스쳐 각각 적용해보기

Albedo 에 기본  이름이 d로 끝나는 텍스쳐 적용하고 (기본 텍스쳐)
Specular 에 s로 끝나는 텍스쳐 적용하고 (스페큘러 빛 색상 반사)
Normal map 에 n으로 끝나는 텍스쳐 적용하고 (노말 혹은 범프)
Emission 체크후 Color에 e로 끝나는 텍스쳐 적용 (자체발광)

% Emssion의 원리는?
실제 모델크기보다 살짝 크게 이미션 색상으로 모델을 만들고 반투명하게 만듬.



# 조명 살펴보기

# Direction Light
전역조명. (태양)

## Mode
- Realtime : 전부 실시간 계산
- Mixed : 베이크도 하지만, 비정적 객체에 직접 조명계산도 하기위해 런타임중에도 계산
- Baked : 노말데이터 법선 과 조명의 각도에 따라 밝기를 미리 계산

% 각 오브젝트들의 우측상단 보면 static이 있는데 화살표 열어서 Contribute GI로 설정하면
Baked 조명의 대상이 된다. 움직이지 않는 정적오브젝트는 이런식으로 미리 조명계산을 시켜서 최적화한다.

## Culling Mask
특정 레이어만 조명을 비추거나 제외할수 있다.


# Point Light
한 점의 원형 범위로 나타나는 조명

Range : 반지름 범위 조절
Intensity : 조명의 밝기 조절

한화면에 포인트 라이트를 4개 이상 만들면 랜덤하게 한개이상은 조명 계산이 제대로 안된다.
그정도로 실시간 조명계산은 컴퓨터에 부하가 심하다.

리얼타임 조명은 굉장히 부하가 크다


# Spot Light
손전등 처럼 방향이 있는 빛의 형태


# Area Light
Baked만 사용가능



# Lighting 뷰에서 라이팅 관련 설정
Lightmap Resolution 이 기본 40으로 되어있는데 10으로 줄이기
texels per unit (광원의 픽셀 갯수)
너무 많을필요없어서 성능을 위해 줄이기

Generate Lighting 버튼 눌러서 Baked 라이팅 조명 계산 실시


베이크조명은 현실로 비유하면 캐릭터가 다가가면 캐릭터는 조명효과를 받지않음. 마치 건물에 페인트칠만 한것같이. 이럴땐 굉장히 어색해질수 있기때문에 추후에 배울
Light Probe 효과를 사용하면 baked 조명이지만 실시간 계산도 할수있다고하심.



# Script
라이프사이클

## Awake() 
인스펙터뷰에서 스크립트를 체크해제해서 비활성화해도 호출되는 라이프사이클이다.
코루틴 함수도 여기서는 사용불가.

## Start() Update() OnDestroy()
이미 아는거

## LateUpdate()
카메라는 주인공을 따라다녀야하는데
주인공이 움직이는걸 update에 하고 카메라가 따라다니는걸 LateUpdate에 적용해야
움직이고나서 카메라가 따라가기때문에 이런 순서가 중요하다.

## FixedUpdate()
물리연산 처리는 항상 일정한 시간대 속도로 처리해야하기때문에 여기서 처리
기본값은 0.02초 (초당 50번)

## OnEnable() / OnDisable()
오브젝트가 활성화/비활성화 될때마다 호출됨
몬스터를 일일히 create/destroy 하는건 성능부담이 크다. 몬스터를 죽이면 disable 처리했다가 다시 Enable처리하는식으로 오브젝트풀링을 한다

## OnGUI
GUI를 다루는 라이프사이클 매프레임 호출


# 사용자에게 키 입력받고 디버그 출력 해보기
        private float h = Input.GetAxis("Horizontal");
        private float v = Input.GetAxis("Vertical");

        Debug.Log("H : " + h.ToString());
        Debug.Log("V : " + v);
		
Input 클래스는 입력을 담당하는 클래스
Edit - Project Setting - Input Manager 를 확인해보면 키 설정이 다 되어있음


% 중요! 벡터b - 벡터a 는 벡터a에서 벡터b를 향해 가는 벡터이다
특정 오브젝트를 향해 가는 벡터를 구할때 자주쓰임


# 정규화 벡터
Vector3.right
Vector3.left
Vector3.up
Vector3.down
Vector3.forward
Vector3.back
Vector3.zero
Vector3.one


# Time.deltaTime
프레임이 다음 프레임까지 넘어가는 시간 (프레임간의 간격)

1초에 1미터를 이동하고싶은데
프레임수가 100프레임인 컴퓨터는 0.01을 곱해주고
50프레임인 컴퓨터는 0.02를 곱해주는식으로
항상 일정한 속도를 맞춰줘야한다












c#의 프로퍼티 속성 복습


