

기계는 2진법으로만 이해

16진수가 2진수와 가장 많이 연관되어있음

255는 FF


무아레 현상 
화면에 무늬



정수 int 4byte 32bit 40억정도

인트는 +- 20억까지 할당가능

만약 사용자가 값을 오버플로 시키면 (20억이 넘어가면) 
-20억으로 역순으로 넘어감

unsigned int = 32bit = 2^32 = 0 ~ 40억

long = 8byte = 64bit = 2^64 = 1800경 =  +- 900경

char = 1byte = 8bit = 0 ~ 255

longlong = 16byte = 128bit = 세기힘들정도의 단위

부동소수점 float = 4byte 

double = 8byte


한글의 문자 갯수

가 ~ 힣
11172 자


class 의 특징
1. 추상화
2. 캡슐
3. 상속
4. 다형성



# gameobject

# MonoBehaviour 모든 Unity 스크립트가 파생되는 기본 클래스



# 이제 유니티 들어가서 알아보기


# inspector vieww

## gameobject 의 컴포넌트들 확인 가능

 컴포넌트는 여러가지 존재
 
### 라이트 조명을 확인해보자 
Type 에 따라 스포트라이트, 다이렉션(햇빛), 포인트 영역 등 존재
이 3개를 묶어서 리얼타임 라이트라고 부른다 (실시간 조명)

그러나 실시간이 아닌 빛도 있음 type 중에 Area (baked only) 정적인 조명 처리
Light Map Baked 이미지 multipy 처리
빛 효과는 효과대로 주고 성능 속도도 올릴수 있는 방법



### main camera 살펴보기

얘 역시 인스펙터뷰를 살펴보면 transform 컴포넌트는 기본적으로 갖고있고
카메라 컴포넌트가 존재한다

어떤 오브젝트든지 camera 컴포넌트를 적용하면 그 오브젝트는 카메라 속성을 갖게됨

Audio Listener 컴포넌트도 존재. 마이크 속성


# 메인메뉴

## Assets
프로젝트 구성에 필요한 리소스들

## GameObject
유니티가 기본적으로 제공하는 오브젝트 등

## Component
게임오브젝트에 적용하는 컴포넌트들

## Window 
툴 사용시 필요한 화면 구성


# Scene 뷰에서 사용하는 툴
핸드툴, 무브툴, 로테이션툴, 스케일툴, 렉탱글툴, 종합툴
qwerty 단축키


# 특정 뷰 전체화면
마우스 커서를 어느 뷰에 두고 shift + Space 를 사용하느냐에 따라 해당 뷰를 전체화면으로 적용


# 오브젝트의 기준점 위치
보통 오브젝트를 처음 생성하면 오브젝트의 중심점에 기준점이 가있다.
사람으로치면 배꼽

그래서 오브젝트생성시에 바닥에 반쯤 묻힘

기준점을 발끝으로 해주는게 기준잡기 좋다

# rotate 사용중에 ctrl 클릭시 15도씩 회전

# 마우스 횔클릭시 카메라 이동

# 마우스 우클릭시 카메라 회전

## 우클릭하면서 wasd 로 카메라 이동 qe는 위아래
### 이동중 쉬프트 누르면 빨리이동


## One Side Rendering 한쪽면만 렌더링
기본 오브젝트 Plane 을 만들어서 아래에서 보면 투명으로 보임
블렌더에서 백스페이스컬링 같은 느낌스

반대개념은 Two Side Rendering 양쪽면 렌더링


# alt + 클릭 이동시 카메라가 공전함 (기준을 두고 돌면서 이동)
# 마우스 우클릭 회전은 카메라 자전(내가 회전)

# 어떤 오브젝트를 선택하고 F 를 누르면 해당 물체에 포커싱
그 상태에서 alt 이동시 그 물체 중심으로 공전


# 기본툴 메뉴중에 Center/Pivot 이 있다.
Center 가 중심점 (무게중심)
Pivot 이 기준점 (기준)

## 도형 두개를 선택해서
Center / Pivot 으로 회전 시켜보면 둘의 차이를 알수있음
센터는 두 도형의 중심. pivot은 각 도형의 기준


# 좌표
## 손좌표 (엄지,검지,중지를 각각 3차원으로 방향표시) (엄지는 x, 검지는 y, 중지는 z)

유니티는 왼손좌표계
X축은 좌우
Y축은 상하
Z축은 앞뒤

블렌더는 오른손좌표계
X축은 좌우
Y축은 앞뒤
Z축은 상하

블렌더에서 Z축 기준으로 서있는 물체가
유니티로 그대로 가져오면 유니티 Z축은 앞뒤이기때문에 누워있게 된다.

### 손가락 끝이 가리키는 방향이 양수 

### 회전은 해당 좌표계의 손가락을 잡아보자. 그럼 그 축을 기준으로 회전한다.

#### 회전의 양수방향은?
X축의 양수방향에서 원점을 바라보고 시계방향으로 도는쪽이 양수

# 유니티에서 사용되는단위
1. 길이 (1유닛에 1미터)
2. 각도 (1이 1도)
3. 질량 (기준이 없음. 모든 유니티의 무게는 상대적임)

## 유니티 Project Settings 의 Physics 2D 항목을 보면 Gravity 값이 있다.
뉴턴의 중력 값 1뉴턴
중력가속도 
처음 1초에 9.81 미터 떨어진다
9.81 m/s

## 기본 유니티 설정은 1유닛에 1미터이다. 
만약 센티미터 기준으로 프로젝트를 구성하려면 중력가속도 또한 바꿔야함.
유니티의 중력가속도는 미터기준이기때문

보통 게임에서 세팅할때 사람이 질량이 1이면 말을 5를 준다거나 상대적으로 이렇게 세팅

ex) 총에 맞고 사람이 날라가는 물리엔진 처리

그럼 총알을 상대적으로 1/10000 을 주면 되나?
그럼 사람이 맞아도 미동도 안한다.

가상공간에서는 실제로 총알이 날라가는게 아니라 1프레임당 위치가 변경되는것

음속 (1초당 340미터) 으로 총알을 날라가게 하면
프레임당 (60프레임기준) 5.6미터씩 이동하면 그 사이의 물체는 충돌 감지가 안된다.
그래서 게임적 개발은 어쩔수없이 속도를 느리게함

그래서 실제 무게 대비로 총알을 1/10000 으로 주면안되고 어느정도 무게를 줘야함. 0.5 이정도

## 짐벌락과 오일러각

X축 회전 : 피치 Pitch
Y축 회전 : 요 Yaw
Z축 회전 : 롤 Roll

자이로스코프

축이 겹치면 오류발생 짐벌락

짐벌락 문제 때문에 각도에 심각한 오류가 발생할수 있음.

유니티에선 오일러각을 쓰지 않는다
3개의 값을 조합해서 임의의 숫자로 지정

Quaternion (사원수) (쿼터니언) 4개의 실수값을 3개의 복소수로 표현한 형태.

개발자는 오일러각으로 보이고 사용하지만 실제 엔진에서 쿼터니언으로 변환해서 처리하는것이다.




# Scene 뷰의 우측상단에 xyz 좌표가 보임. Scene Gizmo 라고 한다


# 폴리곤 모델의 텍스쳐를 입히는게 정석이지만

색상만 변경하고 싶다면
특정색상의 빛을 받는다는 처리를 하는것

폴리곤의 가장 기본값은 삼각형
폴리곤 모델의 가장 작은 기본 모델은 사각형

이미지를 넣는다고 하면 이미지는 2D이기때문에 가로세로 사각형 이미지를 적용해야하기때문
사각형이 기본 모델

gameObject 의 쿼드를 생성해서 보면
4각형의 폴리곤(면)에 하얀색상의 이미지를 붙인것.

Wireframe 뷰로 보면 삼각형 2개의 합으로 되어있음. 이게 폴리곤의 가장 작은 기본 단위

제일 만들기 힘든게 무형의 물질
연기,불꽃 등
보이지 않는 쿼드 여러장을 붙여서 만듬
이미지들을 수십 수백장을 깔아두는것
파티클(입자) 효과

이펙트 디자이너


## Mesh Filter 컴포넌트
Mesh를 Plane으로 적용한다는게 vertex 등 매쉬 구조를 plane 기준으로 한다는것

## Mesh Renderer
Materials - 메터리얼을 여러개 적용 가능.


# 메터리얼 만들어서 적용해보기

Project 뷰에서 머터리얼 새로 생성

## 메터리얼의 inspector 뷰를보면
Shader 항목이 있다.
쉐이더는 엄청나게 중요하고 복잡한 학문임.

### 레이트레이싱
예전의 빛 계산은 직진계산만 했음. 빛 방향을 막으면 물체가 아예 안보임.
빛의 난반사로 인해 전부위가 보이는게 레이트레이싱

## 렌더링모드 : Opaque
빛을 통과시키지 않는상태

## Main Maps
Albedo : 반사광
파란 물체가 파란색인 이유가 파란색만 반사하기때문.




# 과제
큐브, 스피어, 캡슐, 실린더 등 기본 모델을 이용해서

비행기 만들기






























































































