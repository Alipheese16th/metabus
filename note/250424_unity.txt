


# 전치리기

 
전치리는 컴파일 전에 소스 파일을 정리하여, 정의 된 부분만 컴파일 하는 것입니다.
모든 전치리기는 # 지시어로 시작합니다.

 
#define

심볼 정의

#undef

심볼 정의 해제

#if

조건을 만족한다면, 코드 컴파일

#else

조건을 만족하지 않다면, 코드 컴파일

#elif

앞의 조건들은 만족하지 않고, 현재 조건이 만족한다면, 코드 컴파일

#endif

#if 지시문 종료

#region

비주얼 스튜디오에서 확장 축소를 할 수 있는 코드 블록 지정

#endregion

#region 블록 끝 표시




# is 키워드
if (오브젝트1 is 오브젝트2)
이런식으로 타입이 맞는지 확인가능한 키워드가 c#에는 존재한다

# as 키워드
변환이 가능하면 형변환을 하고 불가능하면 null을 리턴



----------------------------------



# 렌더링 파이프라인 정리
mesh 의 라이프사이클을 기반으로 설명

1. Mesh 를 불러오고 렌더링 할것을 요구한다.
게임이 실행되면, 게임은 Mesh를 불러오고 렌더링할것을 요구함.

2. Mesh 를 Disk 에서 RAM 으로 불러온다.
Disk 일대는 .obj .fbx등으로 압축되어있지만, RAM으로 Load하는 과정에서 매쉬정보로 변환된다.

3. CPU에서 GPU에 명령을 전달
이 둘은 Queue 를 사용하여 상호작용하는데 이 큐의 이름이 커맨드 버퍼 (링 버퍼)이다.

4. CPU가 GPU에게 그릴것을 요구함.
2단계에 걸친다.

1) Render State 설정
렌더스테이트는 매쉬가 그려지는 환경이다.
(Vertex Shader, Pixel Shader, Texture, Lighting Setting 을 포함)

2) Mesh를 그려라 (Draw Call, 드로우콜)
매쉬가 그려질 환경이 세팅되면, 매쉬를 그리라는 명령을 실행

이렇게 요구하는 동안 RAM 에서 GPU의 Video RAM으로 매쉬정보가 전달됨.

Render State가 설정되었으면, Mesh를 그릴 수 있다.
Render State가 동일하다면, 해당하는 Mesh들은 Render State를 재설정할 필요없이 Mesh를 그리면 된다.

다른 Render State라면, Render State를 재설정하고 이것에 해당하는 Mesh를 그려야 한다.

Render State 설정은 Mesh를 그려달라(Draw Call)하는 작업보다 무거운 작업이다.
이러한 이유로 Batching이 필요한 것이다.

그러므로 Render State가 한번 설정되면, 계속 Mesh를 그릴 수 있도록 하는 것이 좋다.

예를 들어, 유니티는 동일 쉐이더, 머터리얼 ,텍스처 등을 사용하는 것들을 하나로 묶어서 관리한다. (이것이 Batching, 배칭)




드로우콜, 배칭
렌더파이프라인 종류에 따른 쉐이더 환경 



----------------
%%  TA 테크니컬 아티스트


# PBR  Physically Based Shader  물리기반 렌더링

- 보다 사실적이고 정확한 라이팅

- 셰이더 하나로 모든 재질을 표현할수 있는 장점


# 대표적인 셰이딩의 종류

## 퐁 셰이딩 (Phong Blinn)

각각의 화소 컬러에 조명과 음영을 계산하는 픽셀당 기법
오브젝트 단위로 렌더링 하기때문에 텍스쳐의 질감, 투명도, 범프효과를 정교하게 표현

## 램버트 셰이딩 (Lambert)
벡터를 곱하여 굴곡진 라이팅을 생성함

## NPR (비 물리기반 렌더) 셰이딩
비 물리기반 셰이딩 기법
비현실적이지만 라이트가 되는 텍스쳐를 표면에 매핑하거나 임의로 각도를 틀어가며 렌더링을 함.
매우 다양한 방식이 존재. 비 현실적인 아트표현으로 매우 적절하다


## PBR (물리기반 렌더)
물리 현상을 기반으로 구축된 셰이딩 기법
적은 텍스쳐 리소스와 셰이더 하나로 거의 모든 재질을 표현 가능.

### Oren - Nayar 조명 모델
- Oren-Nayar Model의 공식에서 사용되는 Roughness(거친 표면)은 서로 다른 각도를 가진 Torrance 와 Sparrow에 의해 제안된 미세면(Microfacet)들의 집합으로 설명 됩니다. 모든 표면은 거칠게 만들어져 있으며 그 정도가 다를 뿐 입니다. 

### Blinn - Phong Specular
블린 퐁 셰이딩 방식의 스페큘러 연산 기법 입니다. 모든 표면은 스페큘러가 존재 합니다. 

### Microfacet BRDF
미세 표면의 거친 정도인데, 물체의 표면은 매우 작지만 완전 반사가 일어나는 입자의 집합 입니다. 이 표면이 거칠게 되면 빛 넓게 반사하고 매끈하면 거울처럼 반사하게 됩니다.

### Fresnel
모든 표면은 시야와 경계면에서 임계각을 넘으면 전반사가 일어납니다. 관찰자 시점과 표면이 이루는 각이 일어나는 임계각에 이르면 프레넬 효과가 발생하게 됩니다. 

### Image Base Light
IBL 이라고도 하는데, Reflection과 Ambient Light 등을 만들 때 큐브맵 이미지를 활용해서 이들의 밉맵을 작은 것을 쓰면 이미지가 흐려지게 나오고 원래 해상도의 것을 사용하면 선명하게 나오는데, 이를 라이팅 용으로 활용하는 것으로 볼 수 있습니다. 
간단한 공식으로는 texCUBElod( uv, float4( R, nMips - gloss * nMips)) 로 표현되고 있습니다. 

### BRDF
Bidirectional Reflectance Distribution Function의 약자 입니다. 재질의 표면은 빛을 반사하는 정도가 다르며 각 면에서 반사되어 우리 눈으로 들어오는 반사량도 다르게 됩니다. 이로 인해 같은 모양이라고 하더라도 재질에 따라 어떠한 오브젝트의 중앙이 더 빛날수도 있고 달느 오브젝트는 외곽으로 갈수록 더 빛날 수 도 있습니다. 이러한 현상은 카메라의 입사각과 관련된 표면에 대한 반사율을 컨트롤 할 수 있어야 가능한 현상 입니다. 

### SSS
SubSurface Scattering 의 약자 입니다. 빛이 피부내로 침투하여 반사. 산란되는 현상인데, 피뷰 면은 특정 환경에서 다소 반 투명한것 처럼 보입니다. 쉽게 생각해 보면 라이트위에 손가락을 얹으면 피부가 얇은 곳일수록 더욱 붉게 빛이 산란되며 나타나는 것을 볼 수 있습니다. 

















