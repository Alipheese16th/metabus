
#
Unity 에서 제공되는 Input 클래스에서 사용자의 입력값을 받아와서
GetAxis 라는 메서드로 (Project Setting - Input Manager)에 지정된 키값을 얼마나 눌렀냐에 따라 float로 받아옴 -1 ~ 0 ~ 1

스크립트가 적용된 게임오브젝트의 transform 컴포넌트를 불러와서 그 컴포넌트의 Translate 메서드로 내가 원하는 값만큼 스피드로 이동시킬수 있음)

## Input Class
GetAxis 누르면 점점 1에 가까워짐
GetAxisRaw 는 입력하는 즉시 1 혹은 -1 임


# 정규화 벡터 (벡터의 크기를 일정하게 1로 만듬)
Vector3.right
Vector3.left
Vector3.up
Vector3.down


# Time.deltaTime
초당 프레임수를 나눈 값 (항상 일정한 속도를 사용하기 위해 필요함)


# 중요!
update 라이프사이클에서 객체를 계속 새로 만드는 코드를 작성하면 메모리를 계속 할당하기때문에 비효율적임.

new Vector3() 이런식으로 이동시키는거보다
Vector3.right 같은 정적(static) 속성을 사용하는게 훨씬 최적화가 좋다


# 내가 짠 캐릭터 이동 로직
h = Input.GetAxis("Horizontal");
v = Input.GetAxis("Vertical");
dir = (Vector3.right * h) + (Vector3.forward * v);
tr.Translate(dir * Time.deltaTime * moveSpeed);

보면 좌우는 h 앞뒤는 v 값으로 이동한다 moveSpeed에 따라 속도가 정해짐

그러나 여기에 아주 큰 결함이 하나 있다.


# (중요!!!!!!!) 대각선 이동속도

오른쪽 1속도 + 앞 1속도 로 동시에 이동하면
루트2의 속도로 이동하게됨.

unity에선 아주 쉽게 계산해주는 로직이 있는데
Vector3의 값을 항상 1로 만들어주는 normalized 속성을 호출하면됨
(벡터의 정규화)

근데 이것도 문제가 있다.
normalized를 적용하게 되면 살짝만 눌러도 1값으로 이동하기때문에 속도가 항상 일정하게 된다.
따라서 벡터의 값이 1보다 클때만 노멀라이즈 시켜야함

벡터의 크기를 구하는 속성은 magnitude 이다

컴퓨터는 실수를 더하고 빼고 곱하는건 굉장히 빠르지만
나누는건 굉장히 느림
하물며 루트 (제곱근) 을 구하는건 엄청 느리다

그냥 magnitude 를 쓰면 당연히 실행이 되겠지만 성능을 생각하면 비효율적이다
(magnitude를 구하는 내부 공식이 피타고라스 공식이라 루트값 계산이 나누기연산이라 엄청 느림)

sqrMagnitude 속성을 사용해야함 (단 비교대상도 제곱을 해줘야 계산이 되겠지만)
이래야 성능이 더 빨라짐. 이 간단한 차이때문에 성능차이가 난다


# 캐릭터의 회전
Project Settings - Input Manager 에 보면 Mouse X , Mouse Y 값이 있다.
Sensitivity 의 민감도 값을 조정하면 마우스 속도가 바뀜

Input 클래스의 GetAxis 메서드의 ("Mouse X") 를 받아온다
마우스를 오른쪽으로 움직이면 양수값
마우스를 왼쪽으로 움직이면 음수값

그럼 회전은 어떻게 시킬까

Transform 컴포넌트에서 회전 처리를 해야하는데

%
원래 각도는 게임엔진에서 
오일러각으로 처리 못함 (짐벌락 때문)
쿼터니언 값으로 회전 처리

마우스 x값을 오브젝트의 Y축 회전으로 

Transform컴포넌트.Rotate() 메서드를 사용


% public 변수
한번 public 변수로 설정하면 인스펙터 창에 값의 제어권이 넘어가기때문에 스크립트에서 고쳐도 바로 적용 안된다.



# (중요!) 카메라 설정법

플레이어를 잘 보이게 씬뷰에서 설정하고나서
메인카메라를 선택 후 게임뷰에 마우스를 갖다대고 ctrl + shift + F 를 누르면
카메라가 자동으로 세팅됨

그리고 카메라를 특정 오브젝트의 자식객체로 할당하면 알아서 잘 따라다님

# 카메라 세팅
카메라를 그냥 플레이어 자식객체로 할당해서 사용하는건 썩 좋은 방법이 아니다.

카메라 세팅용 카메라리그 라는 빈 오브젝트를 만들고 스크립트를 만들어서 메인카메라를 자식객체로 넣어준다 
(왜 굳이 이렇게 분리하느냐? 추후에 카메라를 흔드는 연출이 필요할수도 있는데 카메라의 기본 위치값은 카메라리그가 계속 갖고있기때문에 독립적인 기능으로 만들기 편함)

또한 카메라가 지연된 속도로 움직이도록 댐핑값을 넣어줘야함

public Transform target;
public float moveDamping = 15f;
public float rotDamping = 10f;
public float distance = 3f;
public float height = 2.5f;
public float targetOffset = 2.0f;
private Transform tr;

var camPos = target.position - (target.forward * distance) + (target.up * height); // 카메라 위치값 구함
tr.position = Vector3.Slerp(tr.position, camPos, Time.deltaTime * moveDamping); // 카메라 이동
tr.rotation = Quaternion.Slerp(tr.rotation, target.rotation, Time.deltaTime * rotDamping); // 카메라 회전
tr.LookAt(target.position + (target.up * targetOffset)); // 카메라 보는 방향 각도 조절


## Vector3 의 Slerp ?

- Lerp : 직선보간 (간격이 항상 일정함)
- Slerp : 구면직선보간 (처음과 끝은 느린데 중간이 빠름. 마치 그네와 같음. 진자운동)

카메라를 보간함수로 이용해 포지션값을 프레임마다 업데이트를 해주면 카메라의 움직임을 댐핑해줄수 있음.


# 그런데 카메라를 움직이면 너무 덜덜 떨리는 느낌이 든다.
Update() 라이프사이클 끼리는 우선순위가 동등하기때문에 어느게 먼저 실행될지 모른다.
카메라가 먼저 움직일지 캐릭터가 움직일지 며느리도 모른다.

LateUpdate 라이프사이클에 카메라 로직을 작성해야함



# Gizmos 

씬뷰에서만 작동하는 드로우 기능

OnDrawGizmos() 스타트 라이프사이클이 호출되기전에 시작됨



private void OnDrawGizmos()
{
	Gizmos.color = Color.green;
	Gizmos.DrawWireSphere(target.position + (target.up * targetOffset), 0.1f);
	Gizmos.DrawLine(transform.position, target.position + (target.up * targetOffset));
}



# 애니메이션
레거시 애니메이션 : 구형 애니메이션 버전. 메카님보다 가볍다. 간단하게 사용하긴 좋음. 모바일 등.
메카님 애니메이션 : 사람 골격이 다 똑같아서 애니메이션 재활용 - 그대로 적용하기 편하다


우리 실습예제는 주인공이 애니메이션 가짓수가 적기때문에
주인공은 레거시 애니메이션 적용해보고
적들은 메카님 애니메이션 적용해본다고 하심

캐릭터 모델링에 본(뼈)를 심고 리깅을 한다

본을 심어야 버텍스들이 뼈에 맞춰서 움직임. (안그러면 너무 고무인간처럼 버테스들이 움직일거임)

그럼 본만 심으면 끝이냐. 그건 아님
본만 심고 팔을 올린다고 한다면 관절부분이 캔을 접은것처럼 관절이 납작해진다
관절 부분은 모양을 유지하게 해야함. 즉 리깅을 해야 형태가 유지된다.


1. 원화가가 캐릭터 원화를 그린다.
2. 3D 모델러가 모델링함.
3. 리거가 뼈대를 심고 리깅을 한다.
4. 애니메이터가 자연스러운 애니메이션을 적용한다.


# 리깅 작업
범선의 돛을 조절하는 수많은 줄들. 그 줄들을 리깅이라고 한다


# Player 모델의 인스펙터창을 보자

Rig 탭을 보면

## Animation Type
- Legacy : 구형 애니메이션 타입
- Generic : 사람형태가 아닌 나머지 (리타겟팅을 못함)
- Humanoid : 2족보행을 하는 사람형태 (호환되는 모델끼리 리타겟팅이 가능함)

이번 실습 주인공모델은 레거시형태로 사용해보자

% 플레이어 오브젝트의 인스펙터창을 확인해보면
Animator 컴포넌트는 메카님 방식의 애니메이션을 사용할때 쓰는 컴포넌트다
Animation 컴포넌트는 레거시 방식의 애니메이션을 사용할때 쓰는 컴포넌트

레거시형태로 바꾸니까 알아서 컴포넌트가 바뀌었음.


# 애니메이션 클립 에셋 파일을 확인
모델만 끌어다 놓으면 애니메이션 샘플도 볼수있음

## Wrap Mode
- Default : 지정된 기본값
- Once : 한번만
- Loop : 반복 재생
- Ping Pong : 한번실행하고 역재생. (전자운동처럼)
- Clamp Forever: Once는 한 번 재생하고 끝나는데, Clamp Forever는 한 번 재생하고 마지막 프레임에 멈춘 상태로 재생상태를 유지한다. 


# 이제 적용해보기
애니메이션클립파일들을 플레이어 오브젝트의 Animation 컴포넌트에 연결


% 사용자 자료형 클래스나 구조체 등을 public 으로 인스펙터창에 연결하려면
[System.Serializable]
라고 선언해줘야함

Animation 컴포넌트의 clip 속성이 현재 실행할 클립이다. 거기에 실행할 애니메이션클립을 할당해주고 Play() 메서드로 실행시키면됨

키 입력마다 애니메이션을 이제 적용할수있음

그러나 애니메이션이 서로 너무 딱딱 떨어져서 서로 부드럽게 연결이 안됨
CrossFade(); 메서드를 사용해서 애니메이션을 부드럽게 변경 (중간 프레임을 생성)


# 이제 무기를 쥐어주자
Player오브젝트는 우리가 에셋으로 받아온거지만 이건 전문개발자가 만든거라 모델을 펼쳐보면 가슴 - 팔 - 손 - 웨폰홀더 까지 다 영역이 있다. 웨폰홀더 밑에 무기를 쥐어주고 무기의 트랜스폼을 리셋 시켜놓으면 딱 맞는다 


# 사격 구현
유니티에서 사격은 2가지 방식을 쓴다

1. Projectile
2. Raycast

Projectile 방식은 총알에 리지트바디를 적용하고 매 프레임 총알의 위치가 이동함 (프레임단위 이동이라 이동간격이 크다면 사실 중간에 안맞는 경우가 있을수 있는 순간이동)

Raycast 방식은 안보이는 레이저를 쏘고 맞았다고 판단하는 방식

보외법(외삽법) 변수의 추정. 다음 총알의 위치를 미리 계산
보간법(내삽법) 총알과 총알의 사이에 물체가 존재했다면 맞았다고 판단


우리는 Projectile 방식으로 실습해볼것






